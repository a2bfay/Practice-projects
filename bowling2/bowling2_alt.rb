# 9 Oct. --> TESTING ALTERNATE OBJECT DEFINITIONS; removing notes-to-self for easier reading

# BOWLING SIMULATOR WITH SCORING DONE FRAME-BY-FRAME (vs. 'kata' version)
  # crux of trouble so far:  a LANE_GAME is built out of turns, but a PLAYER_GAME is built out of consecutive frames, w/ scores
  # should frame data get stored in PLAYER?  that would require TURN to distribute FRAMES among PLAYERS

# ---- MESSAGES ----
# who's playing?
# what frame are we in?
# whose turn is it?
# what roll result/frame result? --> how good is player?
# what's the current score? --> who's the current leader?
# is the game over?
# who won?

# Getting rid of : RollCalc / Frame / Player / Turn / Game
# In favor of : Player / Frame / PlayerGame / Game
  
# ================================================================================
puts; puts


# ---------------------------------------------------------
# returns up to two weighted random rolls from 10 initial pins
# data: skill / behavior: rolls generated according to skill
class Player
  attr_reader :skill            # calculation methods can be invisible; skill would be useful for screen output 
  def initialize(skill = 0)
    raise RangeError unless skill >= 0
    @skill = skill
  end
    
  def roll
    reset_lane
    weighted_roll(@pins_standing)
    @results
  end
  
  private  
  
  def reset_lane
    @roll_no = 1
    @pins_standing = 10
    @results = []
  end

  def update_lane(pins_hit)
    @roll_no += 1
    @pins_standing -= pins_hit
  end
  
  def weighted_roll(pins)
    pins_hit = apply_skill(pins)
    @results << pins_hit
    update_lane(pins_hit)
    weighted_roll(@pins_standing) unless pins_hit == 10 || @roll_no > 2
  end
  
  def apply_skill(pins)
    picks = []
    (@skill + 1).times { picks << rand(0..pins)
                         break if picks.max == pins }
    picks.max
  end
end

def altver_playertest
  player1 = Player.new
  puts player1.skill
  puts player1.roll.inspect
  puts 

  player2 = Player.new 15
  puts player2.skill
  puts player2.roll.inspect
  puts 
end


# ---------------------------------------------------------
# initialize with array generated by Player
# stores/evaluates set of rolls in single array
# data: rolls / behavior: totals and checks for bonus
class Frame
  attr_reader :results             # read only; avoid accessor
 
  def initialize(player_roll)
    @results = player_roll         # so this is an actual injection; no longer knows class, just response
  end                              # but means doubles are necessary for tests
  
  def first_roll
    @results[0]
  end
  
  def second_roll
    @results[1] # this doesn't appear to require an 'unless' -- simply returns nil if nothing there
  end           # could add boolean second_roll? but don't see value yet
    
  def total
    @results.reduce(:+)
  end

  def strike?
    @results[0] == 10
  end
  
  def spare?
    strike? == false && total == 10
  end
end

def altver_frametest
  frame1 = Frame.new (player1)
  puts "frame1:\t#{frame1.results}"
end


# ---------------------------------------------------------
# || sure about below? || that basically means passing player all down the chain...
# initialize with Player, not with skill setting; for now, knows that Player can .roll --> makes Frame better to test
# generates and stores set of Frame objects in new array
# data: player, frames, turn scores / behavior: generates new frames, (eventually) passes to scoring process
class PlayerGame
  attr_reader :player, :frames, :scores
  def initialize(player) 
    @player = player
    @frames = []
    @scores = []
  end
  
  def take_turn
    bowl
    score_turn
  end

  def frame(num)
    @frames[num - 1]
  end

  def frame_results(num)
    frame(num).results
  end
  
  def frames_played
    @frames.map { |fr| fr.results }
  end
    
  private
  
  def bowl
    player_frame = Frame.new (@player.roll)     # pass Frame object into variable, not Frame.results
    @frames << player_frame                # do the same here? --> YES. makes Frame methods available elsewhere
  end
  
  def score_turn
    # create new scoring window, sending it up to last 3 frames
  end
end

def altver_PGtest
  pgame1 = PlayerGame.new (player1)
  3.times { pgame1.take_turn }
  puts "pgame1:\t#{pgame1.frames_played}"

  pgame2 = PlayerGame.new (player2)
  3.times { pgame2.take_turn }
  puts "pgame2:\t#{pgame2.frames_played}"
end


# initialize with array of Players
class Game
  attr_reader :players, :player_games # :winner 
  def initialize(players)
    @players = players
    @player_games = []
    @players.each { |player| @player_games << PlayerGame.new(player) }
    play_game
  end
  
  private
  
  def play_game
    10.times { play_turn }
  end
  
  def play_turn
    @player_games.each { |curr_player| curr_player.take_turn }
  end
end

# this is acting weird after changing input for Frame...
def altver_gametest
  input_players = [Player.new, Player.new(2), Player.new(4), Player.new(8)]
  puts input_players.inspect
  game1 = Game.new (input_players)
  puts game1.inspect
  puts
  (0...input_players.length).each do |i|
    puts game1.player_games[i].frames_played.inspect
  end
end
# altver_gametest


# user input here --> gets skill and creates player array
def input_player_settings
  print "How many players(1-4)?  "
    numplayers = gets.chomp.to_i
    numplayers = 1 if numplayers < 1
    numplayers = 4 if numplayers > 4
  
  @input_players = []
  puts "Enter skill level 0-15 (2+ = good, 4+ = v.good, 6+ = pro):"
  (1..numplayers).each do |p|
    print "Skill level for player #{p}?  "
    skill = gets.chomp.to_i
    skill = 0 if skill < 0
    @input_players << Player.new(skill)
  end
end

def single_game
  input_player_settings
  game = Game.new(@input_players)
  (0...@input_players.length).each { |i| puts game.player_games[i].frames_played.inspect }
end
single_game








# ===================================================================================================================================================================
# METZ "test everything just once and in the proper place"

require "test/unit"
puts "\n ------- TESTS -------"

class TestPlayer < Test::Unit::TestCase
  def test_roll_limits
    player = Player.new
    assert player.roll.max <= 10
    assert player.roll.min >= 0
  end
  
  def test_roll_sum
    player = Player.new
    assert player.roll.reduce(:+).between? 0, 10
  end
    
  def test_roll_sum_skill
    player = Player.new 15
    assert player.roll.reduce(:+).between? 0, 10
  end
end


# Frame only knows that the object passed to it responds to results
class TestFrame < Test::Unit::TestCase
  def test_first_roll
    frame = Frame.new [3,4]
    assert frame.first_roll == 3
  end
  
  def test_second_roll
    frame = Frame.new [3,4]
    assert frame.second_roll == 4
  end
      
  def test_frame_total
    frame = Frame.new [3,4]
    assert frame.total == 7
  end
  
  def test_second_roll_nil
    frame = Frame.new [10]
    assert frame.second_roll.nil?
  end
  
  def test_frame_strike
    frame = Frame.new [10]
    assert frame.strike?      
  end 
  
  def test_frame_spare
    frame = Frame.new [2,8]
    assert frame.spare?
  end
  
# STORAGE : these doubles provide deterministic cases for testing Frame --> will need if initialize with Object instead of roll array
# class StrikeDouble
  # def results
    # [10]
  # end
# end

# class SpareDouble
  # def results
     # [2,8]
  # end
# end

# class OpenFrameDouble
  # def initialize
    # frame = [3,4]
    # frame
  # end
# end
  
end


# this will be tough to test - game logic is here, with non-deterministic results; mock necessary? 
class TestPlayerGame < Test::Unit::TestCase
end


# GameTurn only knows that the objects passed to it respond to take_turn
#   but that's a command, not a query -- the data in each Player changes when it gets that message
#   so is a mock going to be necessary here?
class TestGame < Test::Unit::TestCase
  def test_single_game
    game = Game.new [Player.new]
    assert game.player_games.length == 1
    puts game.player_games[0].frames_played.inspect
    assert game.player_games[0].frames_played.length == 10
  end

    # something funky happening here...
  # def test_multplr_game
    # game = Game.new [Player.new, Player.new, Player.new, Player.new]
    # puts game.player_games.frames_played.inspect
    # assert game.player_games.length == 4
    # puts game.player_games[0].frames_played.inspect
    # assert game.player_games[0].frames_played.length = 10 
  # end
  
end



# # =========================================================================================================
# # TEMP TESTS / OUTPUT GUIDES

# # for understanding structure of object
# def roll_tests_temp
  # puts "roll_tests line #{__LINE__}"
  # roll1 = RollCalc.new
  # puts "this is object: #{roll1}"
  # puts "this is reading result w/in object: #{roll1.results} / no change between readings: #{roll1.results}"
  # roll2 = RollCalc.new.results
  # puts "this is result of new object saved to var: #{roll2}"
  # puts
# end
# # roll_tests_temp

# def temp_roll_output_test 
  # test_rollcalc = RollCalc.new
  # puts "test_rollcalc: #{test_rollcalc}"
  # puts "test_rollcalc.results: #{test_rollcalc.results}"
  # puts
# end
# # temp_roll_output_test

# # guide to screen output from Frame when initialized with RollCalc OBJECT - not just results
# def temp_frame_tests_NEW
  # 2.times do
    # puts "Frame Skill 0"
    # test_fr = Frame.new ( RollCalc.new ) # here i'm passing in the OBJECT
    # puts test_fr.inspect
    # puts test_fr.results.inspect
    # puts test_fr.first_roll
    # puts test_fr.second_roll           # no error w/ strike, just blank
    # puts test_fr.second_roll.inspect   # yes, nil in that case
    # puts test_fr.total
    # puts test_fr.strike?
    # puts test_fr.spare?
    # puts
  # end

  # 2.times do
    # puts "Frame Skill 15"
    # test_fr = Frame.new ( RollCalc.new(15) )
    # puts test_fr.inspect
    # puts test_fr.results.inspect
    # puts test_fr.first_roll
    # puts test_fr.second_roll           # no error w/ strike, just blank
    # puts test_fr.second_roll.inspect   # yes, nil in that case
    # puts test_fr.total
    # puts test_fr.strike?
    # puts test_fr.spare?
    # puts
  # end
# end
# # temp_frame_tests_NEW

# # guide to screen output when player's @frames is an array of Frame *objects* (not just result arrays)
# def player_tests_temp
  # you = Player.new
  # me = Player.new 5
  # 3.times { you.take_turn; puts you.frames.inspect }   # can't simply drop frames.results.inspect in here
  # 3.times { me.take_turn; puts me.frames.inspect }
  # puts
  # # +1's below only because using single iterator (might otherwise be array index vs. frame no)
  # (0..2).each do |i| 
    # puts "*"
    # puts me.frames[i].inspect             # v
    # puts me.frame(i + 1)                  # this and above are almost equivalent (this line doesn't include @results
    # puts me.frames[i].results.inspect     # this and both below are exactly equivalent
    # puts me.frame(i + 1).results.inspect  # ^
    # puts me.frame_results(i + 1).inspect  # ^
    # puts me.frames[i].strike?
    # puts me.frames[i].spare?
    # puts "*"
    # puts " #{me.frames_played}"
    # puts me.frames_played                 # ok, funny: top line works just like .inspect; bottom spreads all entries on sep lines
  # end
# end
# # player_tests_temp  

# # checking execution of GameTurn by itself and as called by Game; screen outputs included
# # works for game initialized with Player objects - numplayers from UI
# def game_tests_temp
  # puts "turns"
  # alpha = Player.new
  # beta = Player.new
  # 10.times do 
    # turn = GameTurn.new [alpha, beta]
    # puts alpha.frames_played.inspect, beta.frames_played.inspect; puts
  # end

  # puts "test game"
  # input_players = []
  # (0..3).each { |skill| input_players << Player.new(skill) }
  # test_game = Game.new input_players          # this should be fixed
  # test_game.play_game
  # players = test_game.players
  # players.each { |player| puts player.frames_played.inspect }
  # puts
# end
# # game_tests_temp
